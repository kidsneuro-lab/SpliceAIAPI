name: Create Release for AMD64 + ARM64

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  # 1) Generate a single version from the "anothrNick/github-tag-action"
  get-version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag_version.outputs.tag }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Generate version number
        id: tag_version
        uses: anothrNick/github-tag-action@1.70.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch

  # 2) Build & push per-architecture images (two parallel jobs in a matrix).
  build-and-push:
    needs: get-version
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-22.04-arm]
        include:
          - os: ubuntu-latest
            arch: amd64
          - os: ubuntu-22.04-arm
            arch: arm64

    environment:
      name: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          show-progress: 'false'
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # Not using QEMU, because each runner is native to its arch.

      - name: Build & push arch-specific image
        env:
          USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          REPOSITORY: spliceaiapi
          IMAGE_NAME: api
          TAG_LATEST: latest
          TAG_SEMVER: ${{ needs.get-version.outputs.tag }}
          TAG_SHA: ${{ github.sha }}
          ARCH: ${{ matrix.arch }}
        run: |
          set -eux
          # Build & push using the architecture of this runner only
          docker buildx build \
            --platform=linux/$ARCH \
            -t $USERNAME/$REPOSITORY:$TAG_LATEST \
            -t $USERNAME/$REPOSITORY:$TAG_SEMVER \
            -t $USERNAME/$REPOSITORY:$TAG_SHA \
            --push .

  # 3) Create a GitHub release after pushing images
  create-release:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.get-version.outputs.tag }}
          generateReleaseNotes: true